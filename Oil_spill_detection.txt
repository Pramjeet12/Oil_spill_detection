var geometry: Polygon, 4 vertices
var imageCollection: ImageCollection COPERNICUS/S1_GRD
var oil: FeatureCollection (50 elements)
var water: FeatureCollection (50 elements)

Map.centerObject(geometry);

var sen1 = imageCollection.select('VV')
.filterDate('2014','2015')
.filterBounds(geometry)
.filter(ee.Filter.calendarRange(10, 10, 'month'))
.filter(ee.Filter.calendarRange(4, 4, 'day_of_month'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation','VV'))
.filter(ee.Filter.eq('instrumentMode','IW')).mosaic()

//print(sen1.aggregate_array('orbitProperties_pass'))

Map.addLayer(sen1.clip(geometry),[],'sen1',false)

print(
  ui.Chart.image.histogram(sen1,geometry,10)
  )

var despeckel = sen1.focalMean(100, 'square', 'meters');

Map.addLayer(despeckel.clip(geometry),[],'sen_despeckel',false);

print(
  ui.Chart.image.histogram(despeckel,geometry,30)
 )

var thr = despeckel.lt(-22);

Map.addLayer(thr.clip(geometry),[],'oil_spill',false);

//var mask = thr.updateMask(thr);

//Map.addLayer(mask.clip(geometry),[],'mask',false)

//var area = mask.multiply(ee.Image.pixelArea().divide(1e6));

//var oil_spill_area = ee.Number(area.reduceRegion({
 // reducer: ee.Reducer.sum(), geometry: geometry, scale: 100
  //}).values().get(0));
  
//print(oil_spill_area)

var sample = oil.merge(water)

var training = thr.clip(geometry).select('VV').sampleRegions({
  collection: sample,
  properties:["Class"],
  scale:10
  })
print(training)

var dataset = training.randomColumn()

//80% data to train our model
//20% data to test our model

var train_set = dataset.filter(ee.Filter.lessThan('random',0.8))
var test_set = dataset.filter(ee.Filter.greaterThanOrEquals('random',0.8))

var model = ee.Classifier.smileRandomForest(100).train({
  features: train_set ,
  classProperty:'Class' ,
  inputProperties: ['VV']
})


print(model.explain())


var classification = thr.clip(geometry).select('VV').classify(model)

Map.addLayer(classification, {min:0, max:1, palette:['red','blue']})

var confusionMatrix = ee.ConfusionMatrix(test_set.classify(model)
.errorMatrix({
  actual:'Class',
  predicted:'classification'
}))

print(confusionMatrix)
print(confusionMatrix.kappa())

Export.image.toDrive({
  image: classification,
  description: 'Oil_spill_detection',
  scale: 30,
  region: geometry,
  maxPixels: 1e13,
});
